#include <iostream>
#include <clocale>
using std::cin;
using std::cout;
using std::endl;
// якобы рандом : 
int xor_random(int x){
	int tmp = 0;
	tmp ^= x << 13;
	tmp ^= tmp >> 15;
	x ^= tmp << 5;
	return x;
}

// инициализация массива (-50;50): 
int init_array(int A[], const int N){
	for (int i = 0; i < N; i++){
		A[i] = xor_random(i % 1500) % 101 - 50;
		cout << i << ": " << A[i] << endl;
	}
	return 0;
}

// вывод массива в обратном порядке:
int reverse_out_array(int A[], const int N){
	for (int i = N - 1; i >= 0; i--){
		cout << i << ": " << A[i] << endl;
	}
	return 0;
}

// вывод элементов нечётных позиций, затем чётных:
int oe_out_array(int A[], const int N){
	for (int i = 0; i < N; i += 2){
		cout << i << ": " << A[i] << endl;
	}
	for (int i = 1; i < N; i += 2){
		cout << i << ": " << A[i] << endl;
	}
	return 0;
}

// нахождение кол-ва положительных и отрицательных элементов массива:
int np_out_array(int A[], const int N, int &count_pos, int &count_neg){
	for (int i = 0; i < N; i++){
		if (A[i] > 0)
			count_pos++;
		else
			count_neg++;
	}
	cout << "Количество положительных: " << count_pos <<endl<<" Количество отрицательных: " << count_neg <<endl;
	return 0;
}

// max и min:
int max_min_out_array(int A[], const int N, int &max, int &min){
	max = A[0], min = A[0];
	for (int i = 0; i < N; i++){
		if (A[i] > max)
			max = A[i];
		else if (A[i] < min)
			min = A[i];
	}
	return 0;
}

//  кол-во максимальных и минимальных значений, работает с {2,3,4,4,4,5,5,2,5}:
int count_max_min(int A[], const int N){
	int count_max = 0, count_min = 0, max = 0, min = 0;
	max_min_out_array(A, N, max, min);
	for (int i = 0; i < N; i++){
		if (A[i] == max)
			count_max++;
		else if (A[i] == min)
			count_min++;
	}
	cout << "Максимальное значение: " << max << endl << "Минимальное значение: " << min << endl;
	cout << "Кол-во максимальных: " << count_max <<endl << "Кол-во минимальных: " << count_min << endl;
	return 0;
}

// положительные элементы заполняются в начало второго массива, отрицателные в конец:
int interchange(int A[], int B[], const int N){
	int pos = 0, neg = 0, i = 0, count_neg = 0, count_pos = 0;

	// 1 вариант с использованием функции np_out_array()
	np_out_array(A, N, count_pos, count_neg); // нахожу кол-во положительных и отрицательных
	for (i = 0; pos < count_pos; i++){
		if (A[i] > 0) {
			B[pos] = A[i];
			pos++;
		}
	}
	for (i = 0; pos < count_pos + count_neg; i++){
		if (A[i] < 0) {
			B[pos] = A[i];
			pos++;
		}
	}

	return 0;
}

int interchange2(int A[], const int N){
	for (int i = 0; i < N; i++)
	{
		if (A[i] < 0)
		{
			for (int i_end = N / 2; i_end < N; i_end++)
			{
				if (A[i_end] > 0)
				{
					A[i_end] = A[i_end] - A[i]; // перестановка. не делаю проверку на максимум, т.к. a[pos2] всегда > a[pos1]
					A[i] = A[i] + A[i_end];
					A[i_end] = -A[i_end] + A[i];
					break;
				}
			}
		}
	}
	return 0;
}

int main(){
	setlocale(LC_ALL, "Russian");
	const int n = 1500;
	int a[n], b[n];
	int max = 0, min = 0, count_pos = 0, count_neg = 0;
	init_array(a, n);
	reverse_out_array(a, n);
	oe_out_array(a, n);
	np_out_array(a, n, count_pos, count_neg);
	max_min_out_array(a, n, max, min);
	count_max_min(a, n);
	interchange(a, b, n);
	interchange2(a, n);
	cin >> max;
	return 0;
}
